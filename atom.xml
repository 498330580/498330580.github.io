<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.yaoling.cc</id>
    <title>瑶玲之家</title>
    <updated>2025-04-08T01:58:06.791Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.yaoling.cc"/>
    <link rel="self" href="https://blog.yaoling.cc/atom.xml"/>
    <subtitle>一个个人记录网站</subtitle>
    <logo>https://blog.yaoling.cc/images/avatar.png</logo>
    <icon>https://blog.yaoling.cc/favicon.ico</icon>
    <rights>All rights reserved 2025, 瑶玲之家</rights>
    <entry>
        <title type="html"><![CDATA[组网服务Netbird]]></title>
        <id>https://blog.yaoling.cc/post/Q8Q-R--lTb/</id>
        <link href="https://blog.yaoling.cc/post/Q8Q-R--lTb/">
        </link>
        <updated>2025-04-08T01:57:23.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>NetBird 是一个开源的 Zero Trust 网络平台，允许您为您的 组织或家庭。我们将 NetBird 设计为简单快速，几乎不需要任何配置工作，并且只需 在打开端口的麻烦、复杂的防火墙规则、VPN 网关等的背后。</p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>NetBird 是一个开源的 Zero Trust 网络平台，允许您为您的 组织或家庭。我们将 NetBird 设计为简单快速，几乎不需要任何配置工作，并且只需 在打开端口的麻烦、复杂的防火墙规则、VPN 网关等的背后。</p>
<!-- more -->
<blockquote>
<p>NetBird 是一个**<a href="https://github.com/netbirdio/netbird">开源</a>**项目，可以自托管。 <a href="https://docs.netbird.io/selfhosted/self-hosted-vs-cloud-netbird">在此处</a>查看自托管版本和云托管版本之间的比较。</p>
</blockquote>
<p>NetBird 没有集中式 VPN 服务器 - 您的计算机、设备、机器和服务器直接通过快速加密隧道相互连接。 它创建了一个高性能的点对点 <a href="https://www.wireguard.com/">WireGuard®</a> 覆盖网络，只需单击几下即可连接在任何地方运行的计算机。<br>
使用 NetBird 部署安全的点对点 VPN 实际上只需不到 5 分钟。</p>
<p>官方网站：<a href="https://netbird.io/">NetBird - Open-Source Zero Trust Networking</a>  文档：<a href="https://docs.netbird.io/">Introduction to NetBird - NetBird Docs</a></p>
<h1 id="安装前准备">安装前准备</h1>
<h2 id="一-环境配置">一、环境配置</h2>
<p>我们推荐按照 Docker 官方文档安装 Docker 和 Docker Compose，因为部分 Linux 发行版软件仓库中的 Docker 版本可能过旧。</p>
<p><a href="https://docs.docker.com/install/">Docker 安装文档</a><br>
<a href="https://docs.docker.com/compose/install/">Docker Compose 安装文档</a></p>
<h2 id="二-要求">二、要求</h2>
<p><strong>基础设施要求：</strong></p>
<ul>
<li>至少具有 <strong>1 个 CPU</strong> 和 <strong>2 GB</strong> 内存的 Linux VM。</li>
<li>VM 应在 TCP 端口 <strong>80</strong>、<strong>443</strong>、<strong>33073</strong>、<strong>10000</strong> 和 <strong>33080</strong> 上公开访问;和 UDP 端口：<strong>3478</strong>、<strong>49152-65535</strong>。</li>
<li>指向 VM 的<strong>公共域名</strong>。</li>
</ul>
<p><strong>软件要求：</strong></p>
<ul>
<li>使用 docker compose 插件（<a href="https://docs.docker.com/engine/install/">Docker 安装指南</a>）安装在 VM 上的 Docker，或使用版本 2 或更高版本的 docker-compose 安装在 VM 上的 Docker。</li>
<li><a href="https://jqlang.github.io/jq/">JQ</a> 已安装。在大多数发行版中 通常位于官方仓库中，根据系统执行<code>sudo apt install jq</code>或<code>sudo yum install jq</code>安装</li>
<li><a href="https://curl.se/">curl</a> 已安装。 通常位于官方仓库中，根据系统执行<code>sudo apt install curl</code>或<code>sudo yum install curl</code>安装</li>
</ul>
<h2 id="三-创建安装目录">三、创建安装目录</h2>
<p>执行以下命令：</p>
<pre><code class="language-shell">cd ~
mkdir netbird &amp;&amp; cd netbird
</code></pre>
<h1 id="快速安装">快速安装</h1>
<blockquote>
<p>适用于本机没有占用80、443端口的服务器，如果自己配置有反向代理服务，请使用自定义安装服务</p>
</blockquote>
<h2 id="一-下载并运行脚本">一、下载并运行脚本</h2>
<p>下载并运行安装脚本，只需一行：</p>
<pre><code class="language-bash">export NETBIRD_DOMAIN=netbird.example.com; curl -fsSL https://github.com/netbirdio/netbird/releases/latest/download/getting-started-with-zitadel.sh | bash
</code></pre>
<p>如果您想在运行脚本之前检查脚本，您可以下载它并在本地运行它：</p>
<pre><code class="language-bash">curl -sSLO https://github.com/netbirdio/netbird/releases/latest/download/getting-started-with-zitadel.sh
# check the script
cat getting-started-with-zitadel.sh
# run the script
export NETBIRD_DOMAIN=netbird.example.com
bash getting-started-with-zitadel.sh
</code></pre>
<p>替换为您的域名。<code>netbird.example.com</code></p>
<p>脚本执行完成后，您可以使用终端中显示的凭据通过 URL 访问您的 netbird 实例。<code>https://netbird.example.com</code></p>
<h2 id="二-添加用户">二、添加用户</h2>
<p>如果要添加其他用户，您可以使用相同的凭据通过 URL 访问 Zitadel 的管理控制台。按照 Zitadel 的<a href="https://zitadel.com/docs/guides/manage/console/users">用户指南</a>添加其他本地用户，或按照<a href="https://zitadel.com/docs/guides/integrate/identity-providers">指南配置身份提供商</a>将 Zitadel 与您现有的身份提供商集成。<code>https://netbird.example.com/ui/console</code></p>
<h2 id="三-备份">三、备份</h2>
<p>要备份 NetBird 安装，您需要复制配置文件、管理服务数据库和 Zitadel 的数据库。<br>
配置文件位于运行安装脚本的文件夹中。要备份，请将文件复制到备份位置：</p>
<pre><code class="language-bash">mkdir backup
cp docker-compose.yml Caddyfile zitadel.env dashboard.env turnserver.conf management.json relay.env zdb.env backup/
</code></pre>
<p>要保存管理服务数据库，您需要停止管理服务并使用 docker compose 命令从存储目录中复制文件，如下所示：</p>
<pre><code class="language-bash">docker compose stop management
docker compose cp -a management:/var/lib/netbird/ backup/
docker compose start management
</code></pre>
<p>您可以按照 <a href="https://www.cockroachlabs.com/docs/stable/backup">Cockroach 备份指南</a>备份 Zitadel 的数据库，其中包含用户信息。</p>
<h2 id="四-升级">四、升级</h2>
<p>使用版本 &lt; <a href="https://github.com/netbirdio/netbird/releases/tag/v0.15.3">v0.15.3</a> 的用户应首先将他们的系统升级到 <a href="https://github.com/netbirdio/netbird/releases/tag/v0.25.9">v0.25.9</a>。 运行 Management 以将规则正确迁移到策略，然后升级到 <strong>0.26.0+</strong>。<br>
要将 NetBird 升级到最新版本，您需要查看<a href="https://github.com/netbirdio/netbird/releases">发行说明</a>以了解任何重大更改，并按照以下升级步骤作：</p>
<ol>
<li>
<p>运行 <a href="https://docs.netbird.io/selfhosted/selfhosted-quickstart#backup">backup</a> 部分中描述的备份步骤。</p>
</li>
<li>
<p>拉取最新的 NetBird docker 镜像：</p>
<pre><code class="language-bash">docker compose pull management dashboard signal relay
</code></pre>
</li>
<li>
<p>使用新映像重新启动 NetBird 容器：</p>
<pre><code class="language-bash">docker compose up -d --force-recreate management dashboard signal relay
</code></pre>
</li>
</ol>
<h2 id="五-删除">五、删除</h2>
<p>要从服务器中删除 NetBird 安装和所有相关数据，请从安装 NetBird 的文件夹中运行以下命令：</p>
<pre><code class="language-bash"># remove all NetBird-related containers and volumes (data)
docker compose down --volumes
# remove downloaded and generated config files
rm -f docker-compose.yml Caddyfile zitadel.env dashboard.env machinekey/zitadel-admin-sa.token turnserver.conf management.json
</code></pre>
<h1 id="自定义安装">自定义安装</h1>
<h2 id="一-部署authentik-idp">一、部署Authentik IDP</h2>
<blockquote>
<p>NetBird 支持通用 OpenID （OIDC） 协议，允许与遵循规范的任何 IDP 集成。<br>
NetBird 的管理服务与一些最流行的 IDP API 集成，允许该服务缓存和显示用户名和电子邮件地址，而无需存储敏感数据。</p>
</blockquote>
<h3 id="1-新建目录并下载官方的docker-compose">1. 新建目录，并下载官方的docker-compose</h3>
<pre><code class="language-shell">cd ~ &amp;&amp; mkdir authentik &amp;&amp; cd authentik &amp;&amp; wget https://goauthentik.io/docker-compose.yml
</code></pre>
<h3 id="2-安装一个生成随机密码的小工具">2. 安装一个生成随机密码的小工具</h3>
<pre><code class="language-shell">apt -y install pwgen
</code></pre>
<h3 id="3-生成密码和密匙到env文件">3. 生成密码和密匙到.env文件</h3>
<pre><code class="language-shell">echo &quot;PG_PASS=$(pwgen -s 40 1)&quot; &gt;&gt; .env
echo &quot;AUTHENTIK_SECRET_KEY=$(pwgen -s 50 1)&quot; &gt;&gt; .env
</code></pre>
<h3 id="4-启动服务">4. 启动服务</h3>
<pre><code class="language-shell">docker compose up -d
</code></pre>
<h3 id="5-反向代理服务">5. 反向代理服务</h3>
<h4 id="1-先在域名服务商配置你要代理的域名dns到你的服务器">(1) 先在域名服务商配置你要代理的域名DNS到你的服务器</h4>
<h4 id="2-配置反向代理服务">(2) 配置反向代理服务</h4>
<blockquote>
<p>我这里使用的是NPM，NPM的安装参考我另一篇教程 <a href="Nginx%20Proxy%20Manager%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85.md">Nginx Proxy Manager反向代理工具安装</a></p>
</blockquote>
<p><strong>由于官方的docker-compose是对外服务的端口是<code>9000(http)</code>和<code>9443(https)</code>我们在代理的时候就是代理这两个端口，如果我们没有给服务配置ssl证书，那就是直接带了<code>9000</code>端口</strong></p>
<figure data-type="image" tabindex="1"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561740339-PixPin_2025-04-02_10-38-15.png" alt="PixPin_2025-04-02_10-38-15.png" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561745757-PixPin_2025-04-02_10-39-11.png" alt="PixPin_2025-04-02_10-39-11.png" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561755593-PixPin_2025-04-02_10-40-09.png" alt="PixPin_2025-04-02_10-40-09.png" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561759743-PixPin_2025-04-02_10-41-21.png" alt="PixPin_2025-04-02_10-41-21.png" loading="lazy"></figure>
<h4 id="3-配置authentik-idp">(3) 配置Authentik IDP</h4>
<p><strong>👉 先访问：https://你的域名/if/flow/initial-setup/，配置默认的管理员账号和密码。</strong></p>
<p><strong>👉 按照官方文档进行配置：<a href="https://docs.netbird.io/selfhosted/identity-providers#authentik">身份提供商 - NetBird Docs</a>，这里我就不重复这些步骤了。务必记下Client ID、Username、Password，后续配置Netbird需要用到。</strong></p>
<p><strong>❗️ 如果你完全按照官方的文档配置，那么Username就是：Netbird（注意大小写）</strong><br>
<strong>❗️ Password是服务账户的密码，不是Authentik管理员账户的密码。</strong></p>
<h5 id="第-1-步创建-oauth2openid-提供者">第 1 步：创建 OAuth2/OpenID 提供者</h5>
<figure data-type="image" tabindex="5"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563789766-PixPin_2025-04-02_10-57-20.png" alt="PixPin_2025-04-02_10-57-20.png" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563797363-PixPin_2025-04-02_10-58-00.png" alt="PixPin_2025-04-02_10-58-00.png" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563804869-PixPin_2025-04-02_11-01-13.png" alt="PixPin_2025-04-02_11-01-13.png" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563815513-PixPin_2025-04-02_11-07-59.png" alt="PixPin_2025-04-02_11-07-59.png" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563836393-PixPin_2025-04-02_11-14-59.png" alt="PixPin_2025-04-02_11-14-59.png" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563849014-PixPin_2025-04-02_11-09-01.png" alt="PixPin_2025-04-02_11-09-01.png" loading="lazy"></figure>
<figure data-type="image" tabindex="11"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563855904-PixPin_2025-04-02_11-10-54.png" alt="PixPin_2025-04-02_11-10-54.png" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743563864851-PixPin_2025-04-02_11-11-35.png" alt="PixPin_2025-04-02_11-11-35.png" loading="lazy"></figure>
<h5 id="步骤-2创建外部应用程序">步骤 2：创建外部应用程序</h5>
<figure data-type="image" tabindex="13"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743564107426-PixPin_2025-04-02_11-18-55.png" alt="PixPin_2025-04-02_11-18-55.png" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743564115807-PixPin_2025-04-02_11-21-28.png" alt="PixPin_2025-04-02_11-21-28.png" loading="lazy"></figure>
<h5 id="第-3-步创建服务帐户">第 3 步：创建服务帐户</h5>
<figure data-type="image" tabindex="15"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743566985962-PixPin_2025-04-02_11-26-20.png" alt="PixPin_2025-04-02_11-26-20.png" loading="lazy"></figure>
<figure data-type="image" tabindex="16"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743566995127-PixPin_2025-04-02_11-30-22.png" alt="PixPin_2025-04-02_11-30-22.png" loading="lazy"></figure>
<figure data-type="image" tabindex="17"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743567001362-PixPin_2025-04-02_11-39-40.png" alt="PixPin_2025-04-02_11-39-40.png" loading="lazy"></figure>
<h5 id="第-4-步将服务账户添加到管理员组">第 4 步：将服务账户添加到管理员组</h5>
<figure data-type="image" tabindex="18"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743583472333-PixPin_2025-04-02_16-40-41.png" alt="PixPin_2025-04-02_16-40-41.png" loading="lazy"></figure>
<figure data-type="image" tabindex="19"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743583493386-PixPin_2025-04-02_16-41-51.png" alt="PixPin_2025-04-02_16-41-51.png" loading="lazy"></figure>
<figure data-type="image" tabindex="20"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743583506550-PixPin_2025-04-02_16-42-34.png" alt="PixPin_2025-04-02_16-42-34.png" loading="lazy"></figure>
<h5 id="第-5-步创建用于设备令牌身份验证的身份验证流程">第 5 步：创建用于设备令牌身份验证的身份验证流程</h5>
<figure data-type="image" tabindex="21"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743584162245-PixPin_2025-04-02_16-46-37.png" alt="PixPin_2025-04-02_16-46-37.png" loading="lazy"></figure>
<figure data-type="image" tabindex="22"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743584174577-PixPin_2025-04-02_16-50-27.png" alt="PixPin_2025-04-02_16-50-27.png" loading="lazy"></figure>
<p>然后回到菜单选择</p>
<figure data-type="image" tabindex="23"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743584235159-PixPin_2025-04-02_16-51-30.png" alt="PixPin_2025-04-02_16-51-30.png" loading="lazy"></figure>
<figure data-type="image" tabindex="24"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743584289982-PixPin_2025-04-02_16-53-02.png" alt="PixPin_2025-04-02_16-53-02.png" loading="lazy"></figure>
<figure data-type="image" tabindex="25"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743584299303-PixPin_2025-04-02_16-54-24.png" alt="PixPin_2025-04-02_16-54-24.png" loading="lazy"></figure>
<p><strong>务必做好上述这些配置，否则后续Netbird客户端将无法通过URL的方式鉴权。</strong></p>
<h2 id="二-安装netbird">二、安装netbird</h2>
<h3 id="1创建拉取脚本并拉取最新代码">1.创建拉取脚本，并拉取最新代码</h3>
<h4 id="第一步-先创建netbird目录">第一步、先创建<code>netbird</code>目录</h4>
<pre><code class="language-shell">cd ~ &amp;&amp; mkdir netbird &amp;&amp; cd netbird
</code></pre>
<h4 id="第二步-执行nano-startsh然后输入以下内容">第二步、执行<code>nano start.sh</code>，然后输入以下内容：</h4>
<pre><code class="language-bash">#!/bin/bash
REPO=&quot;https://github.com/netbirdio/netbird/&quot;
# this command will fetch the latest release e.g. v0.8.7
LATEST_TAG=$(basename $(curl -fs -o/dev/null -w %{redirect_url} ${REPO}releases/latest))
echo $LATEST_TAG

# this command will clone the latest tag
git clone --depth 1 --branch $LATEST_TAG $REPO
</code></pre>
<p>按<code>Ctrl+X</code>输入<code>y</code>最后回车保存<code>start.sh</code>文件</p>
<p>执行<code>chmod +x start.sh</code>赋予文件执行权限，之后运行<code>start.sh</code>脚本以获取最新版本并克隆代码</p>
<h3 id="2-配置netbird">2. 配置netbird</h3>
<h4 id="步骤1进入配置目录">步骤1：进入配置目录</h4>
<pre><code class="language-shell">cd netbird/infrastructure_files/
</code></pre>
<h4 id="步骤2准备配置文件">步骤2：准备配置文件</h4>
<pre><code class="language-shell"># 复制配置模板
cp setup.env.example setup.env
# 编辑配置
nano setup.env
</code></pre>
<p><strong>需要修改的内容如下：</strong></p>
<pre><code class="language-env"># 这里填写你的netbird域名
NETBIRD_DOMAIN=&quot;&quot;


# 这里填写你的authentik认证服务的地址 &quot;https://你的服务域名/application/o/netbird/.well-known/openid-configuration&quot;
NETBIRD_AUTH_OIDC_CONFIGURATION_ENDPOINT=&quot;https://你的服务域名/application/o/netbird/.well-known/openid-configuration&quot;

# 这里填写你的authentik得到的客户端ID
NETBIRD_AUTH_AUDIENCE=&quot;&quot;
NETBIRD_AUTH_CLIENT_ID=&quot;&quot;
NETBIRD_AUTH_DEVICE_AUTH_CLIENT_ID=&quot;&quot;
NETBIRD_AUTH_DEVICE_AUTH_AUDIENCE=&quot;&quot;
NETBIRD_IDP_MGMT_CLIENT_ID=&quot;&quot;

# 这一项这样修改
NETBIRD_AUTH_SUPPORTED_SCOPES=&quot;openid profile email offline_access api&quot;

# 这里填写authentik
NETBIRD_MGMT_IDP=&quot;authentik&quot;

# 修改这里的为true
NETBIRD_DISABLE_LETSENCRYPT=true

# 添加如下内容
# 这个直接填写Netbird
NETBIRD_IDP_MGMT_EXTRA_USERNAME=&quot;Netbird&quot;
# 这里填写你之前配置Authentik时得到的服务账户密码
NETBIRD_IDP_MGMT_EXTRA_PASSWORD=&quot;Service Account Password&quot;

# 修改默认端口
NETBIRD_MGMT_API_PORT=8012
NETBIRD_SIGNAL_PORT=10000

</code></pre>
<p><strong>参考的是如下图这个<a href="https://docs.netbird.io/selfhosted/identity-providers#authentik">官方文档</a>：</strong></p>
<figure data-type="image" tabindex="26"><img src="https://r2-oss.yaoling.cc/image/2025/04/03/piclist-1743678611132-PixPin_2025-04-03_19-07-38.png" alt="PixPin_2025-04-03_19-07-38.png" loading="lazy"></figure>
<p><strong>修改完成后记得<code>ctrl+x</code> 然后输入<code>y</code> 最后回车保存</strong></p>
<h4 id="步骤3可选禁用单账户模式">步骤3（可选)：禁用单账户模式</h4>
<p><strong>修改<code>docker-compose.yml.tmpl</code>文件</strong></p>
<pre><code class="language-shell">nano docker-compose.yml.tmpl
</code></pre>
<p><strong>然后在<code>management</code>中添加<code>--disable-single-account-mode</code>这条启动命令</strong></p>
<figure data-type="image" tabindex="27"><img src="https://r2-oss.yaoling.cc/image/2025/04/03/piclist-1743679898341-PixPin_2025-04-03_19-29-33.png" alt="PixPin_2025-04-03_19-29-33.png" loading="lazy"></figure>
<p><strong>最后保存并退出</strong></p>
<h4 id="步骤4生成配置文件">步骤4：生成配置文件</h4>
<p><strong>执行官方提供的配置脚本来生成相应的配置文件：</strong></p>
<pre><code class="language-shell">./configure.sh
</code></pre>
<h4 id="步骤5运行docker-compose">步骤5：运行docker compose</h4>
<p><strong>完成后转到artifacts目录</strong></p>
<pre><code class="language-shell">cd artifacts
</code></pre>
<p><em>里面应该有这4个文件：docker-compose.yml、management.json、openid-configuration.json、turnserver.conf</em></p>
<p><strong>👉由于官方的这个脚本有点问题，我们还需要修改一些配置才能使其正常工作，首先编辑management.json：</strong></p>
<pre><code class="language-shell">nano management.json
</code></pre>
<p>默认的信号服务的端口为10000：</p>
<pre><code class="language-json">&quot;Signal&quot;: {
        &quot;Proto&quot;: &quot;https&quot;,
        &quot;URI&quot;: &quot;nb.example.com:10000&quot;,
        &quot;Username&quot;: &quot;&quot;,
        &quot;Password&quot;: &quot;&quot;
    },
</code></pre>
<p>需要将其改为443端口，因为我们后续会配置使用Nginx反向代理信号服务：</p>
<pre><code class="language-shell">&quot;Signal&quot;: {
        &quot;Proto&quot;: &quot;https&quot;,
        &quot;URI&quot;: &quot;nb.example.com:443&quot;,
        &quot;Username&quot;: &quot;&quot;,
        &quot;Password&quot;: &quot;&quot;
    },
</code></pre>
<p><strong>👉还需要修改compose文件：</strong></p>
<pre><code class="language-shell">nano docker-compose.yml
</code></pre>
<p>官方的脚本没有帮我们处理dashboard容器的端口，由于我们后续会配置使用Nginx反向代理，所以将这里的443端口注释掉，容器外的80端口改为8011：</p>
<pre><code class="language-yaml">services:
  #UI dashboard
  dashboard:
    image: netbirdio/dashboard:latest
    restart: unless-stopped
    ports:
      - 8011:80
#      - 443:443
</code></pre>
<p><strong>👉另外dashboard容器的环境变量也需要做修改，默认情况下会把Endpoints相关的环境变量配置为Domain:8012的形式：</strong></p>
<pre><code class="language-yaml">services:
  #UI dashboard
  dashboard:
    image: netbirdio/dashboard:latest
    ...
    environment:
      # Endpoints
      - NETBIRD_MGMT_API_ENDPOINT=https://nb.example.com:8012
      - NETBIRD_MGMT_GRPC_API_ENDPOINT=https://nb.example.com:8012
    ...
</code></pre>
<p>需要将其修改为：</p>
<pre><code class="language-yaml">services:
  #UI dashboard
  dashboard:
    image: netbirdio/dashboard:latest
    ...
    environment:
      # Endpoints
      - NETBIRD_MGMT_API_ENDPOINT=https://nb.example.com
      - NETBIRD_MGMT_GRPC_API_ENDPOINT=https://nb.example.com
</code></pre>
<p><strong>👉启用signal容器的日志，方便后续维护和调试</strong></p>
<pre><code class="language-yaml">...
  signal:
    image: netbirdio/signal:latest
    restart: unless-stopped
...
    command: [ &quot;--log-file&quot;, &quot;console&quot;]
</code></pre>
<p><strong>👉执行如下命令启动容器</strong></p>
<pre><code class="language-shell">docker compose up -d
</code></pre>
<h4 id="步骤6配置nginx反向代理netbird">步骤6：配置Nginx反向代理Netbird</h4>
<p><strong>启动Netbird成功后，现在需要反代Netbird的8011、8012、10000端口，Nginx站点配置文件如下：</strong></p>
<pre><code class="language-conf">upstream dashboard {
    server 127.0.0.1:8011;
    keepalive 10;
}
upstream signal {
    server 127.0.0.1:10000;
}
upstream management {
    server 127.0.0.1:8012;
}

server {
    listen 80;
    listen [::]:80;
    server_name nb.example.com;

    client_header_timeout 1d;
    client_body_timeout 1d;

    proxy_set_header        X-Real-IP $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Scheme $scheme;
    proxy_set_header        X-Forwarded-Proto https;
    proxy_set_header        X-Forwarded-Host $host;
    grpc_set_header         X-Forwarded-For $proxy_add_x_forwarded_for;

    # Proxy dashboard
    location / {
        proxy_pass http://dashboard;
    }
    # Proxy Signal
    location /signalexchange.SignalExchange/ {
        grpc_pass grpc://signal;
        #grpc_ssl_verify off;
        grpc_read_timeout 1d;
        grpc_send_timeout 1d;
        grpc_socket_keepalive on;
    }
    # Proxy Management http endpoint
    location /api {
        proxy_pass http://management;
    }
    # Proxy Management grpc endpoint
    location /management.ManagementService/ {
        grpc_pass grpc://management;
        #grpc_ssl_verify off;
        grpc_read_timeout 1d;
        grpc_send_timeout 1d;
        grpc_socket_keepalive on;
    }
}
</code></pre>
<p><strong>按照文件配置反向代理，然后Netbird服务端就全部部署完毕了。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx Proxy Manager反向代理工具安装]]></title>
        <id>https://blog.yaoling.cc/post/Q7q_1R-Aui/</id>
        <link href="https://blog.yaoling.cc/post/Q7q_1R-Aui/">
        </link>
        <updated>2025-04-07T12:27:05.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>Nginx Proxy Manager（以下简称 NPM）就是一个 Nginx 的代理管理器，它最大的特点是简单方便。<br>
即使是没有 Nginx 基础的小伙伴，也能轻松地用它来完成反向代理的操作，不需要自己写复杂的nginx配置，而且因为自带面板，操作极其简单。<br>
Nginx Proxy Manager 后台还可以一键申请 SSL 证书，并且会自动续期，方便省心。<br>
官方网站：<a href="https://nginxproxymanager.com/">Nginx Proxy Manager</a>官方快速安装：<a href="https://nginxproxymanager.com/guide/#quick-setup">Guide | Nginx Proxy Manager</a></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>Nginx Proxy Manager（以下简称 NPM）就是一个 Nginx 的代理管理器，它最大的特点是简单方便。<br>
即使是没有 Nginx 基础的小伙伴，也能轻松地用它来完成反向代理的操作，不需要自己写复杂的nginx配置，而且因为自带面板，操作极其简单。<br>
Nginx Proxy Manager 后台还可以一键申请 SSL 证书，并且会自动续期，方便省心。<br>
官方网站：<a href="https://nginxproxymanager.com/">Nginx Proxy Manager</a>官方快速安装：<a href="https://nginxproxymanager.com/guide/#quick-setup">Guide | Nginx Proxy Manager</a></p>
<!-- more -->
<h1 id="环境搭建">环境搭建</h1>
<p>我们推荐按照 Docker 官方文档安装 Docker 和 Docker Compose，因为部分 Linux 发行版软件仓库中的 Docker 版本可能过旧。</p>
<p><a href="https://docs.docker.com/install/">Docker 安装文档</a><br>
<a href="https://docs.docker.com/compose/install/">Docker Compose 安装文档</a></p>
<h1 id="创建容器">创建容器</h1>
<h2 id="1-在系统任意位置创建一个文件夹此文档以当前目录创建npm为例">1. 在系统任意位置创建一个文件夹，此文档以当前目录创建npm为例</h2>
<pre><code class="language-shell">mkdir -p npm &amp;&amp; cd npm
</code></pre>
<p><em>注意：后续操作中，产生的所有数据都会保存在这个目录，请妥善保存</em></p>
<h2 id="2-创建-docker-composeyaml">2. 创建 docker-compose.yaml</h2>
<pre><code class="language-shell">nano docker-compose.yml
</code></pre>
<p>粘贴填入下面的内容：</p>
<pre><code class="language-yml">services:
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'              # 不建议修改端口
      - '81:81'              # 可以把冒号左边的 81 端口修改成你服务器上没有被占用的端口
      - '443:443'            # 不建议修改端口
    volumes:
      - ./data:/data         # 点号表示当前文件夹，冒号左边的意思是在当前文件夹下创建一个 data 目录，用于存放数据，如果不存在的话，会自动创建
      - ./letsencrypt:/etc/letsencrypt  # 点号表示当前文件夹，冒号左边的意思是在当前文件夹下创建一个 letsencrypt 目录，用于存放证书，如果不存在的话，会自动创建
    # network_mode: &quot;host&quot;   # 如果代理的服务不是同一个网络建议启用
</code></pre>
<p>之后，同样英文输入法下，按一下<code>Ctrl+X</code>，然后 输入<code>y</code>,最后回车确认退出。</p>
<h2 id="3-启动服务">3. 启动服务</h2>
<p>输入<code>docker compose up -d</code>回车启动服务</p>
<h2 id="4-登录服务">4. 登录服务</h2>
<p>用浏览器访问 <code>http://你的ip:81</code> 即可<br>
例如: <code>http://127.0.0.1:81</code><br>
默认登陆的用户名：<code>admin@example.com</code> 密码：<code>changeme</code></p>
<p><em>第一次登陆会提示更改用户名和密码，建议修改一个复杂一点的密码。</em></p>
<h1 id="更新容器">更新容器</h1>
<h2 id="1-停止运行中的容器组">1. 停止运行中的容器组</h2>
<pre><code class="language-bash">cd npm &amp;&amp; docker compose down
</code></pre>
<h3 id="2-备份数据重要">2. 备份数据（重要）</h3>
<pre><code class="language-bash">cp -r ~/npm ~/npm.back
</code></pre>
<p>需要注意的是，<code>npm.back</code> 文件名不一定要根据此文档命名，这里仅仅是个示例。</p>
<h3 id="3-更新服务">3. 更新服务</h3>
<p>拉取最新镜像</p>
<pre><code class="language-shell">docker compose pull
</code></pre>
<p>重新启动容器</p>
<pre><code class="language-shell">docker compose up -d
</code></pre>
<h1 id="配置npm">配置NPM</h1>
<p>首先我们登陆网页端之后，会弹出修改用户名和密码的对话框，我们根据自己的实际来修改自己的用户名和邮箱。</p>
<figure data-type="image" tabindex="1"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743601430512-PixPin_2025-04-02_18-46-08.png" alt="PixPin_2025-04-02_18-46-08.png" loading="lazy"></figure>
<p>保存之后，会让我们修改密码（建议用一个复杂的密码）。</p>
<figure data-type="image" tabindex="2"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743601449829-PixPin_2025-04-02_18-46-22.png" alt="PixPin_2025-04-02_18-46-22.png" loading="lazy"></figure>
<p>接着我们就可以添加一个反向代理了。</p>
<h1 id="配置反向代理">配置反向代理</h1>
<blockquote>
<p>配置前记得将域名解析到你的服务器上</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561740339-PixPin_2025-04-02_10-38-15.png" alt="PixPin_2025-04-02_10-38-15.png" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561745757-PixPin_2025-04-02_10-39-11.png" alt="PixPin_2025-04-02_10-39-11.png" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561755593-PixPin_2025-04-02_10-40-09.png" alt="PixPin_2025-04-02_10-40-09.png" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://r2-oss.yaoling.cc/image/2025/04/02/piclist-1743561759743-PixPin_2025-04-02_10-41-21.png" alt="PixPin_2025-04-02_10-41-21.png" loading="lazy"></figure>
<h1 id="汉化">汉化</h1>
<p>由于官方镜像是英文，对部分人员使用起来不方便，在github上有汉化版<br>
<a href="https://github.com/xiaoxinpro/nginx-proxy-manager-zh">xiaoxinpro/nginx-proxy-manager-zh: 基于nginx-proxy-manager翻译的中文版本</a><br>
以及对应的docker镜像<br>
<a href="https://hub.docker.com/r/chishin/nginx-proxy-manager-zh">chishin/nginx-proxy-manager-zh - Docker Image | Docker Hub</a></p>
<p>当你使用官方示例的docker-compose时需要注意，将<code>image</code>镜像<code>jc21/nginx-proxy-manager</code>替换为<code>chishin/nginx-proxy-manager-zh</code>即可实现中文部署</p>
<p>中文镜像并没有重新构建后端代码，由<code>Dockerfile-zh</code>源码可以得知，中文版镜像基于官方镜像替换前端代码来实现的，所以中文版本的全部功能与官方版本完全相同，只是显示界面的文字不同的区别。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群晖 NAS 全应用端口对应列表]]></title>
        <id>https://blog.yaoling.cc/post/n6UTEnqSfY/</id>
        <link href="https://blog.yaoling.cc/post/n6UTEnqSfY/">
        </link>
        <updated>2025-03-29T11:30:35.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>为了方便随时随地访问，我们往往需要在群晖 NAS 接入的路由上做好端口映射。不过群晖的套件那么多，每个应用的端口又是多少呢？以下是群晖 NAS 各应用的端口对应列表，方便以后的使用！</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>为了方便随时随地访问，我们往往需要在群晖 NAS 接入的路由上做好端口映射。不过群晖的套件那么多，每个应用的端口又是多少呢？以下是群晖 NAS 各应用的端口对应列表，方便以后的使用！</p>
</blockquote>
<!-- more -->
<h2 id="setup-utilities">Setup Utilities</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>Synology Assistant</td>
<td>9999, 9998, 9997</td>
<td>UDP</td>
</tr>
</tbody>
</table>
<h2 id="backup">Backup</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>Active Backup for Business</td>
<td>5510 (Synology NAS) Note: Only used for the backup of Hyper-V or physical Windows device. 443 (vCenter Server and ESXi host), 902 (ESXi host); 5985 (HTTP for Hyper-V), 5986 (HTTPS for Hyper-V)</td>
<td>TCP</td>
</tr>
<tr>
<td>Data Replicator, Data Replicator II, Data Replicator III</td>
<td>9999, 9998, 9997, 137, 138, 139, 445</td>
<td>TCP</td>
</tr>
<tr>
<td>DSM 5.2 Data Backup, rsync, Shared Folder Sync, Remote Time Backup</td>
<td>873, 22 (if encrypted over SSH)</td>
<td>TCP</td>
</tr>
<tr>
<td>Hyper Backup (destination)</td>
<td>6281 (multi-version backup), 22 (if encrypted over SSH), 873 (remote data copy)</td>
<td>TCP</td>
</tr>
<tr>
<td>Hyper Backup Vault, DSM 5.2 Archiving Backup</td>
<td>6281</td>
<td>TCP</td>
</tr>
<tr>
<td>LUN Backup</td>
<td>3260 (iSCSI), 873, 22 (if encrypted over SSH)</td>
<td>TCP</td>
</tr>
<tr>
<td>Snapshot Replication</td>
<td>3261 (iSCSI LUN), 5566 (shared folder)</td>
<td>TCP</td>
</tr>
</tbody>
</table>
<h2 id="download">Download</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>BT</td>
<td>16881 (for DSM 2.0.1 or above); 6890-6999 (for DSM 2.0.1-3.0401 or earlier version)</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>eMule</td>
<td>4662 (TCP), 4672 (UDP)</td>
<td>TCP/UDP</td>
</tr>
</tbody>
</table>
<h2 id="web-applications">Web Applications</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>DSM</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>File Station</td>
<td>5000 (HTTP, additional port can be added), 5001 (HTTPS, additional port can be added)</td>
<td>TCP</td>
</tr>
</tbody>
</table>
<h2 id="mail-server">Mail Server</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>IMAP</td>
<td>143</td>
<td>TCP</td>
</tr>
<tr>
<td>IMAP over SSL/TLS</td>
<td>993</td>
<td>TCP</td>
</tr>
<tr>
<td>POP3</td>
<td>110</td>
<td>TCP</td>
</tr>
<tr>
<td>POP3 over SSL/TLS</td>
<td>995</td>
<td>TCP</td>
</tr>
<tr>
<td>SMTP</td>
<td>25</td>
<td>TCP</td>
</tr>
<tr>
<td>SMTPs</td>
<td>465</td>
<td>TCP</td>
</tr>
</tbody>
</table>
<h2 id="file-transferring">File Transferring</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>AFP</td>
<td>548</td>
<td>TCP</td>
</tr>
<tr>
<td>CIFS</td>
<td>smbd: 139 (netbios-ssn), 445 (microsoft-ds)</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>CIFS</td>
<td>Nmbd: 137, 138</td>
<td>UDP</td>
</tr>
<tr>
<td>FTP, FTP over SSL, FTP over TLS</td>
<td>21 (command), 20 (data connection in Active Mode), 1025-65535 (data connection in Passive Mode) Note: The default range varies according to your Synology product models.</td>
<td>TCP</td>
</tr>
<tr>
<td>iSCSI</td>
<td>3260</td>
<td>TCP</td>
</tr>
<tr>
<td>NFS</td>
<td>111, 892, 2049</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>TFTP</td>
<td>69</td>
<td>UDP</td>
</tr>
<tr>
<td>WebDAV, CalDAV</td>
<td>5005, 5006 (HTTPS)</td>
<td>TCP</td>
</tr>
</tbody>
</table>
<h2 id="packages">Packages</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>Audio Station</td>
<td>1900 (UDP), 5000 (HTTP, additional port can be added), 5001 (HTTPS, additional port can be added), 5353 (Bonjour service), 6001-6010 (AirPlay control/timing)</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>Central Management System</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>CIFS Scale-out Cluster</td>
<td>49152-49252</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>CIFS Scale-out Cluster</td>
<td>17909, 17913, 19998, 24007, 24008, 24009-24045, 38465-38501, 4379</td>
<td>TCP</td>
</tr>
<tr>
<td>Cloud Station</td>
<td>6690</td>
<td>TCP</td>
</tr>
<tr>
<td>DHCP Server</td>
<td>67, 68</td>
<td>UDP</td>
</tr>
<tr>
<td>LDAP Server (formerly Directory Server)</td>
<td>389 (LDAP), 636 (LDAP with SSL)</td>
<td>TCP</td>
</tr>
<tr>
<td>Download Station</td>
<td>5000</td>
<td>TCP</td>
</tr>
<tr>
<td>iTunes Server</td>
<td>3689</td>
<td>TCP</td>
</tr>
<tr>
<td>Logitech® Media Server</td>
<td>3483, 9002</td>
<td>TCP</td>
</tr>
<tr>
<td>Mail Station</td>
<td>80 (HTTP), 443 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Media Server</td>
<td>1900 (UPnP), 50001 (content browsing), 50002 (content streaming)</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>Migration Assistant</td>
<td>7400-7499</td>
<td>DRBD</td>
</tr>
<tr>
<td>Note Station</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Photo Station, Web Station</td>
<td>80 (additional port can be added), 443 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Presto File Server</td>
<td>3360, 3361</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>Proxy Server</td>
<td>3128</td>
<td>TCP</td>
</tr>
<tr>
<td>Surveillance Station</td>
<td>9900 (HTTP), 9901 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Synology Calendar</td>
<td>38008, 38443</td>
<td>CalDAV</td>
</tr>
<tr>
<td>Synology CardDAV Server</td>
<td>8008 (HTTP), 8443 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Synology Chat</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Synology Contacts</td>
<td>5555</td>
<td>CardDAV</td>
</tr>
<tr>
<td>Synology Directory Server</td>
<td>88 (Kerberos), 389 (LDAP), 464 (Kerberos password change)</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>Synology Directory Server</td>
<td>135 (RPC Endpoint Mapper), 636 (LDAP SSL), 1024 (RPC), 3268 (LDAP GC), 3269 (LDAP GC SSL)</td>
<td>TCP</td>
</tr>
<tr>
<td>Synology Drive Server</td>
<td>80 (link sharing), 443 (link sharing), 5000 (HTTP), 5001 (HTTPS), 6690 (Synology Drive Client)</td>
<td>TCP</td>
</tr>
<tr>
<td>Synology Moments</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Syslog Server</td>
<td>514 (additional port can be added)</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>Video Station</td>
<td>1900 (UDP), 5000 (HTTP), 5001 (HTTPS), 9025-9040, 5002, 5004, 65001 (for using the HDHomeRun network tuner)</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>Virtual Machine Manager</td>
<td>2379-2382 (cluster network), 3260-3264 (iSCSI), 5000 (HTTP), 5001 (HTTPS), 5566 (replication), 16509, 16514, 30200-30300</td>
<td>TCP</td>
</tr>
<tr>
<td>VPN Server (OpenVPN)</td>
<td>1194, 1195</td>
<td>UDP</td>
</tr>
<tr>
<td>VPN Server (PPTP)</td>
<td>1723, 2001</td>
<td>TCP</td>
</tr>
<tr>
<td>VPN Server (L2TP/IPSec)</td>
<td>500, 1701, 4500</td>
<td>UDP</td>
</tr>
</tbody>
</table>
<h2 id="mobile-applications">Mobile Applications</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>DS audio</td>
<td>5000, 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>DS cam</td>
<td>5000, 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>DS cloud</td>
<td>6690</td>
<td>TCP</td>
</tr>
<tr>
<td>DS file</td>
<td>5005 (HTTP), 5006 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>DS finder</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>DS get</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>DS note</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>DS photo</td>
<td>80, 443 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>DS video</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Synology Drive</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
<tr>
<td>Synology Moments</td>
<td>5000 (HTTP), 5001 (HTTPS)</td>
<td>TCP</td>
</tr>
</tbody>
</table>
<h2 id="printers-ups-and-peripheral-equipments">Printers, UPS, and Peripheral Equipments</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bonjour</td>
<td>5353</td>
<td>UDP</td>
</tr>
<tr>
<td>LPR</td>
<td>515</td>
<td>UDP</td>
</tr>
<tr>
<td>Network Printer (IPP)/CUPS</td>
<td>631</td>
<td>TCP</td>
</tr>
<tr>
<td>Network MFP</td>
<td>3240-3259</td>
<td>TCP</td>
</tr>
<tr>
<td>UPS</td>
<td>3493</td>
<td>TCP</td>
</tr>
</tbody>
</table>
<h2 id="system">System</h2>
<table>
<thead>
<tr>
<th>Name</th>
<th>Port Number</th>
<th>Protocol</th>
</tr>
</thead>
<tbody>
<tr>
<td>LDAP</td>
<td>389, 636 (SLAPD)</td>
<td>TCP</td>
</tr>
<tr>
<td>MySQL</td>
<td>3306</td>
<td>TCP</td>
</tr>
<tr>
<td>Resource Monitor/SNMP</td>
<td>161</td>
<td>TCP/UDP</td>
</tr>
<tr>
<td>SSH/SFTP</td>
<td>22</td>
<td>TCP</td>
</tr>
<tr>
<td>Telnet</td>
<td>23</td>
<td>TCP</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[记录一次Docker-Compose部署Typecho]]></title>
        <id>https://blog.yaoling.cc/post/c-noeHZM9F/</id>
        <link href="https://blog.yaoling.cc/post/c-noeHZM9F/">
        </link>
        <updated>2025-03-29T11:29:19.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>事情起源于在B站发布技术专栏不是很方便，就想着能自己搭建一个博客，方便记录一些自己的文章。<br>
在明确了目标之后，就在网上找了一些方案，最后确定使用Typecho的方案搭建自己的博客，GitHubPage作为备份的网站。<br>
这么选择主要是因为我喜欢使用obsdian做笔记，而Typecho和GitHubPage都可以直接用MD语法写博客，转换成本不高。并且Typecho的系统占用也不高，可以使用本地数据库SQLite，很符合我对自己博客的定义：轻量。基于Java的Halo本身对资源消耗太大，毕竟Java开发的，还要加上一个mysql数据库，刚运行就需要800M的内存。基于PHP的WordPass又太臃肿了，而且不能使用SQLite这种本地数据库。最后选择下来发现了Typecho这个博客软件。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>事情起源于在B站发布技术专栏不是很方便，就想着能自己搭建一个博客，方便记录一些自己的文章。<br>
在明确了目标之后，就在网上找了一些方案，最后确定使用Typecho的方案搭建自己的博客，GitHubPage作为备份的网站。<br>
这么选择主要是因为我喜欢使用obsdian做笔记，而Typecho和GitHubPage都可以直接用MD语法写博客，转换成本不高。并且Typecho的系统占用也不高，可以使用本地数据库SQLite，很符合我对自己博客的定义：轻量。基于Java的Halo本身对资源消耗太大，毕竟Java开发的，还要加上一个mysql数据库，刚运行就需要800M的内存。基于PHP的WordPass又太臃肿了，而且不能使用SQLite这种本地数据库。最后选择下来发现了Typecho这个博客软件。</p>
<!-- more -->
<h2 id="安装docker及docker-compose">安装docker及docker-compose</h2>
<blockquote>
<p>这个安装过程请参考docker官方教程</p>
</blockquote>
<ul>
<li>**docker安装教程：<a href="https://docs.docker.com/engine/install/">Install | Docker Docs</a></li>
<li>docker compose安装教程：<a href="https://docs.docker.com/compose/">Docker Compose | Docker Docs</a></li>
</ul>
<h2 id="安装typecho">安装Typecho</h2>
<h3 id="创建typecho数据目录">创建typecho数据目录</h3>
<p><em><strong>登录服务器并执行以下命令</strong></em></p>
<pre><code class="language-shell">mkdir typecho &amp;&amp; cd typecho &amp;&amp; mkdir data &amp;&amp; chmod -R 777 data
</code></pre>
<h3 id="创建docker-composeyaml文件">创建docker-compose.yaml文件</h3>
<p><em><strong>执行命令<code>nano docker-compose.yaml</code> 将以下文件内容复制到命令窗口</strong></em></p>
<pre><code class="language-yaml">version: '3.7'

services:
  typecho:
    image: joyqi/typecho:nightly-php8.2-apache
    container_name: typecho-server
    restart: always
    environment:
      - TYPECHO_SITE_URL=https://your-domain.com   # 网站网址
      - TIMEZONE=Asia/Shanghai         # 时区
      - TYPECHO_DB_ADAPTER=SQLite      # 选择SQLite数据
      - TYPECHO_DB_DATABASE=/app/data  # SQLite的数据目录
      - TYPECHO_USER_NAME=admin    # 管理员用户名
      - TYPECHO_USER_PASSWORD=admmin123456   # 管理员密码
      - TYPECHO_USER_MAIL=admin0@admin.com     # 管理员邮箱
    ports:
      - 30081:80                       # typecho的对外访问目录
    volumes:
      - ./typecho:/app/usr             # 你的 Typecho 数据目录
      - ./data:/app/data               # SQLite的数据目录
</code></pre>
<blockquote>
<p>⚠️注意⚠️：把上面复制的内容修改为你自己的内容</p>
</blockquote>
<p><strong>修改完成后按Ctrl+X按键，在提示框输入Y，之后在敲回车保存文件。</strong></p>
<figure data-type="image" tabindex="1"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243648876-PixPin_2025-03-19_20-51-18.png" alt="PixPin_2025-03-19_20-51-18.png" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243655033-PixPin_2025-03-29_14-31-56.png" alt="PixPin_2025-03-29_14-31-56.png" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243662026-PixPin_2025-03-29_14-32-56.png" alt="PixPin_2025-03-29_14-32-56.png" loading="lazy"></figure>
<p><em><strong>docker-compose如何配置环境变量请参考如下表格</strong></em></p>
<table>
<thead>
<tr>
<th>环境变量</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>TIMEZONE</td>
<td>UTC</td>
<td>服务器时区，例如：Asia/Shanghai</td>
</tr>
<tr>
<td>MEMORY_LIMIT</td>
<td>无</td>
<td>PHP 内存限制，例如：100M</td>
</tr>
<tr>
<td>MAX_POST_BODY</td>
<td>无</td>
<td>最大 POST 请求体大小，例如：50M</td>
</tr>
<tr>
<td>TYPECHO_INSTALL</td>
<td>0</td>
<td>设置为 1 时自动运行安装脚本</td>
</tr>
<tr>
<td>TYPECHO_DB_ADAPTER</td>
<td>Pdo_Mysql</td>
<td>Typecho 数据库驱动，可选值：Pdo_Mysql, Pdo_SQLite, Pdo_Pgsql, Mysqli, SQLite, Pgsql</td>
</tr>
<tr>
<td>TYPECHO_DB_HOST</td>
<td>localhost</td>
<td>数据库服务器地址，仅适用于 MySQL 和 PostgreSQL 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_PORT</td>
<td>3306（MySQL）或 5432（PostgreSQL）</td>
<td>数据库服务器端口，仅适用于 MySQL 和 PostgreSQL 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_USER</td>
<td>无</td>
<td>数据库用户名，仅适用于 MySQL 和 PostgreSQL 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_PASSWORD</td>
<td>无</td>
<td>数据库密码，仅适用于 MySQL 和 PostgreSQL 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_FILE</td>
<td>无</td>
<td>SQLite 数据库文件存储路径，仅适用于 SQLite 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_DATABASE</td>
<td>无</td>
<td>数据库名称，仅适用于 MySQL 和 PostgreSQL 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_PREFIX</td>
<td>typecho_</td>
<td>所有表的前缀</td>
</tr>
<tr>
<td>TYPECHO_DB_ENGINE</td>
<td>InnoDB</td>
<td>MySQL 数据库引擎，仅适用于 MySQL 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_CHARSET</td>
<td>utf8（PostgreSQL）或 utf8mb4（MySQL）</td>
<td>数据库字符集，仅适用于 MySQL 和 PostgreSQL 驱动</td>
</tr>
<tr>
<td>TYPECHO_DB_NEXT</td>
<td>none</td>
<td>当数据库中已有应用表时执行的操作：<br>none：什么都不做，直接退出<br>keep：保留这些表，跳过初始化步骤<br>force：删除这些表，重新初始化数据</td>
</tr>
<tr>
<td>TYPECHO_SITE_URL</td>
<td>无</td>
<td>网站 URL，例如：https://your-domain.com</td>
</tr>
<tr>
<td>TYPECHO_USER_NAME</td>
<td>typecho</td>
<td>创建的管理员用户名</td>
</tr>
<tr>
<td>TYPECHO_USER_PASSWORD</td>
<td>随机 8 位字符串</td>
<td>创建的管理员密码</td>
</tr>
<tr>
<td>TYPECHO_USER_MAIL</td>
<td>admin@localhost.local</td>
<td>创建的管理员邮箱地址</td>
</tr>
</tbody>
</table>
<h3 id="部署">部署</h3>
<p><strong>在命令行执行以下命令：</strong></p>
<pre><code class="language-shell">docker compose up -d
</code></pre>
<p><em>如果使用的是普通用户请记得在前面加上sudo：</em></p>
<pre><code class="language-shell">sudo docker compose up -d
</code></pre>
<figure data-type="image" tabindex="4"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243707829-PixPin_2025-03-29_14-42-15.png" alt="PixPin_2025-03-29_14-42-15.png" loading="lazy"></figure>
<p><em>如果要停止应用的运行，先在命令行cd到安装目录，然后执行以下命令：</em></p>
<pre><code class="language-shell">docker compose down
</code></pre>
<h2 id="配置typecho">配置Typecho</h2>
<h3 id="开放访问">开放访问</h3>
<blockquote>
<p>有两种方式开放访问，一种是通过端口访问，一种是通过服务器的反向代理<br>
注意反向代理的方式设需要使用你设置的网站网址访问</p>
</blockquote>
<h4 id="通过端口访问">通过端口访问</h4>
<ul>
<li>如果安装了宝塔等管理面板需要先在面板中开放端口，这里打开 <code>30081</code> 端口</li>
<li>在服务器提供商的控制面板中打开对应的端口，这里打开 <code>30081</code> 端口</li>
<li>如果系统自带了防火墙，请在系统防火墙放行访问端口</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243747793-PixPin_2025-03-29_15-02-43.png" alt="PixPin_2025-03-29_15-02-43.png" loading="lazy"></figure>
<h4 id="通过反代反问">通过反代反问</h4>
<h5 id="通过宝塔等面板设置反代">👉通过宝塔等面板设置反代</h5>
<p><strong>在面板的网站设置里面设置反向代理到 <code>localhost:30081</code></strong></p>
<h5 id="通过npm设置反代">👉通过NPM设置反代</h5>
<figure data-type="image" tabindex="6"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243761059-PixPin_2025-03-29_15-06-57.png" alt="PixPin_2025-03-29_15-06-57.png" loading="lazy"></figure>
<p><strong>🔺点击主界面的“代理服务”。</strong></p>
<figure data-type="image" tabindex="7"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243772929-PixPin_2025-03-29_15-07-36.png" alt="PixPin_2025-03-29_15-07-36.png" loading="lazy"></figure>
<p><strong>🔺添加代理服务。</strong></p>
<figure data-type="image" tabindex="8"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243782387-PixPin_2025-03-29_15-09-39.png" alt="PixPin_2025-03-29_15-09-39.png" loading="lazy"></figure>
<p><strong>🔺然后在这里：</strong></p>
<ul>
<li>域名：域名就是我们反代使用的域名，需要说明的是，这个域名首先在<a href="https://www.aliyun.com/minisite/goods?userCode=new5p4uz">运营商</a>那里做好DNS解析（比喻腾讯云或者阿里云，解析包括普通解析与泛解析），然后把域名在我们服务器上做好DNS解析。</li>
<li>协议：默认 <code>http</code> 即可。</li>
<li>转发主机/IP：这个直接填入本地地址即可。</li>
<li>转发端口：服务端的内网端口，可以是某个Docker容器的端口，看你自己的需求了。</li>
</ul>
<h5 id="通过caddy反代">👉通过Caddy反代</h5>
<p><strong>1⃣编辑caddy配置文件</strong></p>
<p><em>➡️执行命令<code>nano /etc/caddy/Caddyfile</code></em></p>
<p><em>➡️添加反代内容</em></p>
<pre><code class="language-shell">your-domain.com  {
    reverse_proxy localhost:30081
}
</code></pre>
<blockquote>
<p>⚠注意：your-domain.com是你的网站地址</p>
</blockquote>
<figure data-type="image" tabindex="9"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243795199-PixPin_2025-03-29_15-27-06.png" alt="PixPin_2025-03-29_15-27-06.png" loading="lazy"></figure>
<p><strong>2⃣保存并启用反代</strong></p>
<ol>
<li>按 <code>Ctrl+X</code> ➡️ 选择<code>Y</code> ➡️ 回车保存</li>
<li>执行 <code>systemctl reload caddy</code> 重新加载配置，使反代生效。参考：<a href="https://caddy2.dengxiaolong.com/docs/running">保持Caddy运行 — Caddy v2中文文档</a></li>
</ol>
<h3 id="配置网站">配置网站</h3>
<figure data-type="image" tabindex="10"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243830596-PixPin_2025-03-29_16-23-21.png" alt="PixPin_2025-03-29_16-23-21.png" loading="lazy"></figure>
<figure data-type="image" tabindex="11"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243835894-PixPin_2025-03-29_16-25-18.png" alt="PixPin_2025-03-29_16-25-18.png" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243841384-PixPin_2025-03-29_16-26-46.png" alt="PixPin_2025-03-29_16-26-46.png" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://r2-oss.yaoling.cc/image/2025/03/29/piclist-1743243852103-PixPin_2025-03-29_16-15-06.png" alt="PixPin_2025-03-29_16-15-06.png" loading="lazy"></figure>
<h2 id="结语">结语</h2>
<p>至此typecho安装就完毕了，使用的过程我就不赘述了，大家可以在网上去找自己喜欢的主题，也可以用默认的。<br>
安装的过程中要注意，使用sqlite数据的时候，存放数据文件的文件夹需要有<code>777</code>权限，我这里在创建目录的时候就给予了权限。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandoc+Enhancing Export插件实现Obsidian文件导出为其他文件]]></title>
        <id>https://blog.yaoling.cc/post/iTvO3mLgl2/</id>
        <link href="https://blog.yaoling.cc/post/iTvO3mLgl2/">
        </link>
        <updated>2025-03-29T11:27:32.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>使用这个插件的原因主要是因为想把obsidian中的笔记分享到B站专栏，但是直接复制上去B站又不能保证这个格式，最后找到这个插件导出为word格式，然后再复制到B站专栏减少编辑过程。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>使用这个插件的原因主要是因为想把obsidian中的笔记分享到B站专栏，但是直接复制上去B站又不能保证这个格式，最后找到这个插件导出为word格式，然后再复制到B站专栏减少编辑过程。</p>
<!-- more -->
<h2 id="插件介绍">插件介绍</h2>
<p>这是一个基于 Pandoc 的 Obsidian 加强版导出插件。提供了基本的导出格式：Markdown 、Markdown（Hugo https://gohugo.io/ ）、Html、docx、Latex等。 其中 Markdown 、Markdown（Hugo）、Html 会把媒体资源一并导出。</p>
<blockquote>
<p>注意： 目前自用的就是 Markdown 、Markdown（Hugo）、Html，在 Mac OS、Windows、Linux 可正常使用，其他未经严格测试。</p>
</blockquote>
<h2 id="插件界面">插件界面</h2>
<figure data-type="image" tabindex="1"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324204233_PixPin_2025-03-24_20-41-44.webp" alt="PixPin_2025-03-24_20-41-44.webp" loading="lazy"></figure>
<h2 id="pandoc安装">Pandoc安装</h2>
<h3 id="访问官网">访问官网</h3>
<p><a href="https://pandoc.org/installing.html">Pandoc - Installing pandoc</a></p>
<h3 id="点击下载链接">点击下载链接</h3>
<figure data-type="image" tabindex="2"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324204939_PixPin_2025-03-24_20-49-31.webp" alt="PixPin_2025-03-24_20-49-31.webp" loading="lazy"></figure>
<h3 id="选择对应的下载版本">选择对应的下载版本</h3>
<figure data-type="image" tabindex="3"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324205119_PixPin_2025-03-24_20-51-01.webp" alt="PixPin_2025-03-24_20-51-01.webp" loading="lazy"></figure>
<blockquote>
<p>我这里下载的是windows的zip包 <a href="https://github.com/jgm/pandoc/releases/download/3.6.4/pandoc-3.6.4-windows-x86_64.zip">pandoc-3.6.4-windows-x86_64.zip</a>，没有下载安装版</p>
</blockquote>
<h3 id="安装软件">安装软件</h3>
<p><strong>解压下载好的 <a href="https://github.com/jgm/pandoc/releases/download/3.6.4/pandoc-3.6.4-windows-x86_64.zip">pandoc-3.6.4-windows-x86_64.zip</a></strong><br>
<strong>我这里是解压到 <code>C:\Program Files\Pandoc</code> 这个路径</strong><br>
<strong>记录好这个路径</strong></p>
<figure data-type="image" tabindex="4"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324205866_PixPin_2025-03-24_20-58-52.webp" alt="PixPin_2025-03-24_20-58-52.webp" loading="lazy"></figure>
<h3 id="配置环境变量可选">配置环境变量（可选）</h3>
<p><strong>如果是win10及以上的系统版本可以直接搜索 <code>环境变量</code> 然后编辑系统环境变量</strong></p>
<figure data-type="image" tabindex="5"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324210538_PixPin_2025-03-24_21-05-31.webp" alt="PixPin_2025-03-24_21-05-31.webp" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324210735_PixPin_2025-03-24_21-07-12.webp" alt="PixPin_2025-03-24_21-07-12.webp" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324210735_PixPin_2025-03-24_21-07-46.webp" alt="PixPin_2025-03-24_21-07-46.webp" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324210887_PixPin_2025-03-24_21-08-28.webp" alt="PixPin_2025-03-24_21-08-28.webp" loading="lazy"></figure>
<blockquote>
<p>注意：配置完成后最好重启一次系统让环境变量生效</p>
</blockquote>
<h2 id="插件安装">插件安装</h2>
<h4 id="点击obsidian的设置然后浏览搜索插件">点击Obsidian的设置，然后浏览搜索插件</h4>
<blockquote>
<p>注意：访问社区插件市场需要魔法哟</p>
</blockquote>
<figure data-type="image" tabindex="9"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324211069_PixPin_2025-03-24_21-10-53.webp" alt="PixPin_2025-03-24_21-10-53.webp" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324211387_PixPin_2025-03-24_21-12-43.webp" alt="PixPin_2025-03-24_21-12-43.webp" loading="lazy"></figure>
<h4 id="安装并启用并配置插件">安装并启用并配置插件</h4>
<figure data-type="image" tabindex="11"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324211931_PixPin_2025-03-24_21-17-51.webp" alt="PixPin_2025-03-24_21-17-51.webp" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324211951_PixPin_2025-03-24_21-18-20.webp" alt="PixPin_2025-03-24_21-18-20.webp" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324212282_PixPin_2025-03-24_21-22-19.webp" alt="PixPin_2025-03-24_21-22-19.webp" loading="lazy"></figure>
<p>**主要是配置Pandoc的路径，这个路径就是之前安装Pandoc的路径 <code>C:\Program Files\Pandoc</code> 加上  <code>pandoc.exe</code> ，配置完成后的完整路径是 <code>C:\Program Files\Pandoc\pandoc.exe</code>，如果之前配置了环境变量这里就不用配置了，插件会自动识别。</p>
<h2 id="插件使用">插件使用</h2>
<figure data-type="image" tabindex="14"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324212969_PixPin_2025-03-24_21-28-52.webp" alt="PixPin_2025-03-24_21-28-52.webp" loading="lazy"></figure>
<figure data-type="image" tabindex="15"><img src="https://r2-oss.yaoling.cc/image/2025/03/24/20250324212980_PixPin_2025-03-24_21-29-57.webp" alt="PixPin_2025-03-24_21-29-57.webp" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MinIO+Minio uploader插件实现obsidian文件床，加快多设备同步速度]]></title>
        <id>https://blog.yaoling.cc/post/skpfp9LRCW/</id>
        <link href="https://blog.yaoling.cc/post/skpfp9LRCW/">
        </link>
        <updated>2025-03-24T13:59:33.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>以前我是使用alist+piclist实现obsidian的图床功能，但是这样无法实现自动的视频和音频等文件的自动上传，最后在插件市场发现了Minio uploader这款插件，它能实现对几乎obsidian支持的附件的云端化。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>以前我是使用alist+piclist实现obsidian的图床功能，但是这样无法实现自动的视频和音频等文件的自动上传，最后在插件市场发现了Minio uploader这款插件，它能实现对几乎obsidian支持的附件的云端化。</p>
<!-- more -->
<h2 id="插件介绍">插件介绍</h2>
<p>将图片、视频、音频、PDF等文件上传到 Minio OSS 中，而不是复制到本地。减少本地磁盘占用大小，提高多设备之间同步的效率。</p>
<h2 id="安装minio">安装MinIO</h2>
<p><a href="https://blog.yaoling.cc/post/B0dX9BTo6j/">自建OSS服务：MinIO</a></p>
<h2 id="插件配置">插件配置</h2>
<h3 id="参数配置">参数配置</h3>
<blockquote>
<p>提示：端口号为 Minio 的API数据访问端口号</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319212128_PixPin_2025-03-19_21-21-04.png" alt="PixPin_2025-03-19_21-21-04.png" loading="lazy"></figure>
<h3 id="在-minio-控制台的-bucket-设置中开启文件匿名访问能力即通过url可直接访问文件">在 Minio 控制台的 Bucket 设置中开启文件匿名访问能力，即通过URL可直接访问文件。</h3>
<blockquote>
<p>我这里设置的是整个bucket根目录对外提供只读服务，当然还有进阶的设置，可以自行查看minio的文档</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319194866_image.png" alt="image.png" loading="lazy"></figure>
<h3 id="保存规则配置">保存规则配置</h3>
<figure data-type="image" tabindex="3"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319212705_PixPin_2025-03-19_21-24-58.png" alt="PixPin_2025-03-19_21-24-58.png" loading="lazy"></figure>
<h3 id="预览配置">预览配置</h3>
<figure data-type="image" tabindex="4"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319212795_PixPin_2025-03-19_21-27-05.png" alt="PixPin_2025-03-19_21-27-05.png" loading="lazy"></figure>
<h2 id="插件缺点">插件缺点</h2>
<ul>
<li>文档，特别是PDF的预览功能没有直接粘在附件中好用，介意的最好不用这个插件</li>
<li>删除需要在minio的对象浏览器中删除</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[自建OSS服务：MinIO]]></title>
        <id>https://blog.yaoling.cc/post/B0dX9BTo6j/</id>
        <link href="https://blog.yaoling.cc/post/B0dX9BTo6j/">
        </link>
        <updated>2025-03-23T13:33:05.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="minio介绍">MinIO介绍</h2>
<p>MinIO 是一种对象存储解决方案，可提供与 Amazon Web Services S3 兼容的 API，并支持所有核心 S3 功能。 MinIO 旨在部署在任何地方，公共云或私有云、裸机基础设施、编排环境和边缘基础设施。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="minio介绍">MinIO介绍</h2>
<p>MinIO 是一种对象存储解决方案，可提供与 Amazon Web Services S3 兼容的 API，并支持所有核心 S3 功能。 MinIO 旨在部署在任何地方，公共云或私有云、裸机基础设施、编排环境和边缘基础设施。</p>
<!-- more -->
<h2 id="部署">部署</h2>
<h3 id="docker部署推荐">Docker部署（推荐）</h3>
<h4 id="参考文档">参考文档</h4>
<p><a href="https://min.io/docs/minio/container/index.html">MinIO 容器对象存储 — 用于容器的 MinIO 对象存储</a></p>
<h4 id="部署过程">部署过程</h4>
<h5 id="安装docker">安装docker</h5>
<blockquote>
<p>系统安装docker和docker compose的方法这里就不再赘述了，网上一搜一大堆</p>
</blockquote>
<h5 id="部署过程-2">部署过程</h5>
<h6 id="创建minio应用数据目录">创建minio应用数据目录</h6>
<blockquote>
<p>这个目录主要是用来储存minio自己的数据的</p>
</blockquote>
<pre><code class="language-shell">
mkdir -p /appdata/minio/data

  

</code></pre>
<h6 id="创建储存数据目录">创建储存数据目录</h6>
<blockquote>
<p>这个目录是用来储存用户上传的数据的</p>
</blockquote>
<pre><code class="language-shell">
mkdir -p /appdata/minio/userdata

</code></pre>
<h6 id="创建应用">创建应用</h6>
<pre><code class="language-shell">
cd /appdata/minio

  

docker run \

-p 9000:9000 \

-p 9001:9001 \

--name minio \

-v ./data:/root/.minio \

-v ./userdata:/userdata \

-e &quot;MINIO_ROOT_USER=ROOTNAME&quot; \

-e &quot;MINIO_ROOT_PASSWORD=CHANGEME123&quot; \

quay.io/minio/minio server /userdata --console-address &quot;:9000&quot; -address &quot;:9001&quot;

</code></pre>
<h6 id="命令解释">命令解释</h6>
<ul>
<li>
<p><code>-p 9000:9000</code> 左边的<code>9000</code>是web控制台的外部访问端口，右边的<code>9000</code>必须和 <code>--console-address &quot;:9000&quot;</code> 中的<code>9000</code>对应</p>
</li>
<li>
<p><code>-p 9001:9001</code> 左边的<code>9001</code>是oss的对外服务地址，右边的<code>9001</code>必须和<code>-address &quot;:9001&quot;</code> 中的<code>9001</code>对应</p>
</li>
<li>
<p><code>--name minio</code> 应用名称</p>
</li>
<li>
<p><code>-v ./data:/root/.minio</code> 映射应用数据目录</p>
</li>
<li>
<p><code>-v ./userdata:/userdata</code> 映射oss上传的数据目录，右边必须和<code>quay.io/minio/minio server /userdata</code>这里的<code>/userdata</code>对应，左边就是刚才创建的目录</p>
</li>
<li>
<p><code>-e &quot;MINIO_ROOT_USER=ROOTNAME&quot;</code> 管理员账号</p>
</li>
<li>
<p><code>-e &quot;MINIO_ROOT_PASSWORD=CHANGEME123&quot;</code> 管理员密码</p>
</li>
<li>
<p><code>quay.io/minio/minio server /userdata --console-address &quot;:9000&quot; -address &quot;:9001&quot;</code> 这一段是拉起服务的</p>
</li>
</ul>
<h3 id="unraid应用市场部署">UNRAID应用市场部署</h3>
<blockquote>
<p>仅限于使用UNRAID NAS系统的同志</p>
</blockquote>
<blockquote>
<p>非UNRAID系统的其他NAS系统一般都自带Docker，建议使用docker部署</p>
</blockquote>
<h5 id="首先在应用市场搜索应用">首先在应用市场搜索应用</h5>
<figure data-type="image" tabindex="1"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319195344_PixPin_2025-03-19_16-45-27.png" alt="PixPin_2025-03-19_16-45-27.png" loading="lazy"></figure>
<h5 id="根据配置模版配置应用">根据配置模版配置应用</h5>
<blockquote>
<p>按照下图中的备注配置</p>
</blockquote>
<blockquote>
<p>但是要注意几个端口号要配置正确，具体参照上方的docker部署方法，参数是相同的</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319200026_PixPin_2025-03-19_19-59-56.png" alt="PixPin_2025-03-19_19-59-56.png" loading="lazy"></figure>
<h2 id="使用">使用</h2>
<h3 id="登录">登录</h3>
<blockquote>
<p>访问 <code>http://你的IP地址:9000/login</code></p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319204383_PixPin_2025-03-19_20-42-55.png" alt="PixPin_2025-03-19_20-42-55.png" loading="lazy"></figure>
<h3 id="创建用户">创建用户</h3>
<figure data-type="image" tabindex="4"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319204690_PixPin_2025-03-19_20-45-46.png" alt="PixPin_2025-03-19_20-45-46.png" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319204877_PixPin_2025-03-19_20-48-15.png" alt="PixPin_2025-03-19_20-48-15.png" loading="lazy"></figure>
<h3 id="创建用户组">创建用户组</h3>
<figure data-type="image" tabindex="6"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319204992_PixPin_2025-03-19_20-49-27.png" alt="PixPin_2025-03-19_20-49-27.png" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319205187_PixPin_2025-03-19_20-51-18.png" alt="PixPin_2025-03-19_20-51-18.png" loading="lazy"></figure>
<h3 id="创建buckets">创建Buckets</h3>
<figure data-type="image" tabindex="8"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319205377_PixPin_2025-03-19_20-53-45.png" alt="PixPin_2025-03-19_20-53-45.png" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319205688_PixPin_2025-03-19_20-55-46.png" alt="PixPin_2025-03-19_20-55-46.png" loading="lazy"></figure>
<blockquote>
<p>为了方便外部访问最好打开Buckets的匿名访问</p>
</blockquote>
<figure data-type="image" tabindex="10"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319211081_PixPin_2025-03-19_21-10-34.png" alt="PixPin_2025-03-19_21-10-34.png" loading="lazy"></figure>
<h3 id="创建accesskey和secretkey">创建AccessKey和SecretKey</h3>
<blockquote>
<p>自建对象储存肯定是需要用其他方式调用对象储存的，调用就需要这两个值</p>
</blockquote>
<blockquote>
<p>由于我们创建了用户，为方便权限管理，我们就在用户下面创建</p>
</blockquote>
<p>第二步后选择自己创建的用户，然后就会出现第三步和第四步</p>
<figure data-type="image" tabindex="11"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319210130_PixPin_2025-03-19_21-01-34.png" alt="PixPin_2025-03-19_21-01-34.png" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319210582_PixPin_2025-03-19_21-04-23.png" alt="PixPin_2025-03-19_21-04-23.png" loading="lazy"></figure>
<figure data-type="image" tabindex="13"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319210744_PixPin_2025-03-19_21-07-01.png" alt="PixPin_2025-03-19_21-07-01.png" loading="lazy"></figure>
<p>这是json文件的内容，里面包含了accessKey和secretKey</p>
<pre><code class="language-json">
{&quot;url&quot;:&quot;http://127.0.0.1:9001&quot;,&quot;accessKey&quot;:&quot;MjXO2yYdY1S4OYzUHqHe&quot;,&quot;secretKey&quot;:&quot;umEUeG4PcYhUzjdpYfGhfGL4hZysC1U4FeEDem80&quot;,&quot;api&quot;:&quot;s3v4&quot;,&quot;path&quot;:&quot;auto&quot;}

</code></pre>
<p>接下来就可以通过<code>9001</code>端口对外提供服务了</p>
<h3 id="对象上传与删除">对象上传与删除</h3>
<figure data-type="image" tabindex="14"><img src="https://r2-oss.yaoling.cc/image/2025/03/19/20250319213744_PixPin_2025-03-19_21-36-59.png" alt="PixPin_2025-03-19_21-36-59.png" loading="lazy"></figure>
<h3 id="安全的提供服务">安全的提供服务</h3>
<p>现在虽然可以通过<code>9001</code>端口访问服务了，但是不可能一直在内网传输，肯定要涉及外网使用，我这里使用的是lucky这个服务使用<code>https</code>反向代理的minio服务。大家也可以使用自己的方法代理自己的服务。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://blog.yaoling.cc/post/hello-gridea/</id>
        <link href="https://blog.yaoling.cc/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>